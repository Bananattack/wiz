/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* THIS FILE WAS AUTOGENERATED FROM /home/overkill/web/mercer/AAAAAAAAAAAAAA/wiz.tmLanguage (UUID: 93E017CC-6F27-11D9-90EB-000DFACEABD8) */
/****************************************************************
 * IT MIGHT NOT BE PERFECT, PARTICULARLY:                       *
 * IN DECIDING STATES TO TRANSITION TO,                         *
 * IGNORING WHITESPACE,                                         *
 * IGNORING GROUPS WITH ?:,                                     *
 * EXTENDING EXISTING MODES,                                    *
 * GATHERING KEYWORDS, OR                                       *
 * DECIDING WHEN TO USE PUSH.                                   *
 * ...But it's a good start from an existing *.tmlanguage file. *
 ****************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var WizHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = { start: 
       [ { todo: 'fix grouping',
           token: 
            [ 'meta.function.wiz',
              'keyword.control.wiz',
              'entity.name.function.scope.wiz' ],
           regex: '\\b(def)\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\b' },
         { todo: 'fix grouping',
           token: 
            [ 'meta.function.wiz',
              'keyword.control.wiz',
              'support.class.wiz' ],
           regex: '\\b(package|func|task)\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\b' },
         { todo: 'fix grouping',
           token: 
            [ 'meta.function.wiz',
              'keyword.control.wiz',
              'entity.name.function.scope.wiz' ],
           regex: '\\b(let)\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\b' },
         { caseInsensitive: true,
           todo: 'fix grouping',
           token: 
            [ 'meta.function.wiz',
              'keyword.control.wiz',
              'entity.name.function.scope.wiz',
              'keyword.operator.wiz' ],
           regex: '\\b(in)\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\b' },
         { todo: 'fix grouping',
           token: [ 'text', 'keyword.control.wiz' ],
           regex: '\\b(var|bank)',
           push: 
            [ { todo: 'fix grouping',
                token: 
                 [ 'text',
                   'entity.name.function.scope.wiz',
                   'keyword.operator.wiz' ],
                regex: '\\b([a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(,)|(?=[$:]))' },
              { todo: 'fix grouping',
                token: [ 'text', 'keyword.operator.wiz', 'keyword.control.wiz' ],
                regex: '(\\:)\\s*([a-zA-Z_][a-zA-Z_0-9]*)',
                next: 'pop' },
              { defaultToken: 'meta.variable.wiz' } ] },
         { token: 'constant.numeric.wiz',
           regex: '(\\b0x[a-fA-F0-9]+\\b|\\b[0-9]+\\b|\\b0b[0-1]+\\b)' },
         { token: 'punctuation.definition.string.begin.wiz',
           regex: '\'',
           push: 
            [ { token: 'constant.character.escape.wiz', regex: '\\\\.' },
              { token: 'punctuation.definition.string.end.wiz',
                regex: '\'',
                next: 'pop' },
              { defaultToken: 'string.quoted.single.wiz' } ] },
         { token: 'punctuation.definition.string.begin.wiz',
           regex: '"',
           push: 
            [ { token: 'constant.character.escape.wiz', regex: '\\\\.' },
              { token: 'punctuation.definition.string.end.wiz',
                regex: '"',
                next: 'pop' },
              { defaultToken: 'string.quoted.double.wiz' } ] },
         { token: 'punctuation.definition.comment.source.wiz',
           regex: '/\\*',
           push: 
            [ { token: 'punctuation.definition.comment.source.wiz',
                regex: '\\*/\\n?',
                next: 'pop' },
              { defaultToken: 'comment.block.source.wiz' } ] },
         { todo: 'fix grouping',
           token: 
            [ 'comment.line.double-slash.source.wiz',
              'punctuation.definition.comment.source.wiz' ],
           regex: '(//).*$\\n?' },
         { token: 'keyword.control.wiz',
           regex: '\\b(let|not|var|def|bank|in|byte|word|if|is|then|elseif|else|compare|bit|to|end|goto|far|call|sleep|hibernate|nop|return|resume|loop|until|while|do|package|pop|push|via|when|break|continue|abort|include|embed|func|task|inline|unroll)\\b' },
         { token: 'support.class.wiz',
           regex: '\\b(zero|carry|interrupt|overflow|negative|decimal|a|b|c|d|e|h|l|sp|hl|af|bc|de|x|y|s|p)\\b' },
         { token: 'variable.language.wiz',
           regex: '\\[|\\]|\\=(?!\\=)|\\!' },
         { token: 'keyword.operator.wiz',
           regex: '\\+[+#]?|-[-#]?|%|\\*|\\/|\\^|&|\\||==|~(=?)|<(=|>|<(-|<#?)?)?|>(=|>(-|>#?)?)?|@|\\:|,' } ] }
    
    this.normalizeRules();
};

oop.inherits(WizHighlightRules, TextHighlightRules);

exports.WizHighlightRules = WizHighlightRules;
});