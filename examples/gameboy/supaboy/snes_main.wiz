let K = 1024
bank code : rom * 4 * K
bank ram : ram * 2 * K

include '../common/gameboy.wiz'

package snes do
    package ppu do
        let BRIGHTNESS_FORCE_BLANK = 0x80
        let BRIGTNESS_MASK = 0x0F
        let brightness = 0x2100

        let BG_MODE_0 = 0x0
        let BG_MODE_1 = 0x1
        let BG_MODE_2 = 0x2
        let BG_MODE_3 = 0x3
        let BG_MODE_4 = 0x4
        let BG_MODE_5 = 0x5
        let BG_MODE_6 = 0x6
        let BG_MODE_7 = 0x7
        let BG_MODE_BG3_PRIORITY = 0x8
        let BG_MODE_BG0_16x16 = 0x10
        let BG_MODE_BG1_16x16 = 0x20
        let BG_MODE_BG2_16x16 = 0x40
        let BG_MODE_BG3_16x16 = 0x80

        let bg_mode = 0x2105

        let OBJ_MODE_8x8_16x16 = 0x00
        let OBJ_MODE_8x8_32x32 = 0x20
        let OBJ_MODE_8x8_64x64 = 0x40
        let OBJ_MODE_16x16_32x32 = 0x60
        let OBJ_MODE_16x16_64x64 = 0x80
        let OBJ_MODE_32x32_64x64 = 0xA0
        let OBJ_MODE_16x32_32x64 = 0xC0
        let OBJ_MODE_16x32_32x32 = 0xE0
        let OBJ_MODE_NAME_DISP_MASK = 0x18
        let OBJ_MODE_NAME_BASE_MASK = 0x03
        let obj_mode = 0x2101

        let DISPLAY_BG1 = 0x01
        let DISPLAY_BG2 = 0x02
        let DISPLAY_BG3 = 0x04
        let DISPLAY_BG4 = 0x08
        let DISPLAY_OBJ = 0x10

        let main_display = 0x212C
        let sub_display = 0x212D

        let WINDOW_MASK_BG1 = 0x01
        let WINDOW_MASK_BG2 = 0x02
        let WINDOW_MASK_BG3 = 0x04
        let WINDOW_MASK_BG4 = 0x08
        let WINDOW_MASK_OBJ = 0x10
        
        let main_window_mask = 0x212E
        let sub_window_mask = 0x212F

        let SCREEN_MODE_BG_INTERLACE = 0x01
        let SCREEN_MODE_OBJ_INTERLACE = 0x02
        let SCREEN_MODE_OVERSCAN = 0x04
        let SCREEN_MODE_HIRES = 0x08
        let SCREEN_MODE_MODE7_EXTRA_BG = 0x40
        let SCREEN_MODE_EXTERNAL_SYNC = 0x80

        let screen_mode = 0x2133

        let MOSAIC_BG0 = 0x01
        let MOSAIC_BG1 = 0x02
        let MOSAIC_BG2 = 0x04
        let MOSAIC_BG3 = 0x08
        let MOSAIC_ALL = 0x0F
        let MOSAIC_SIZE_SHIFT = 4

        let mosaic = 0x2106

        let INCREMENT_ON_LOW = 0x00
        let INCREMENT_ON_HIGH = 0x80
        let INCREMENT_1 = 0x00
        let INCREMENT_32 = 0x01
        let INCREMENT_128 = 0x02
        let INCREMENT_REMAP_MODE_0 = 0x00
        let INCREMENT_REMAP_MODE_1 = 0x04
        let INCREMENT_REMAP_MODE_2 = 0x08
        let INCREMENT_REMAP_MODE_3 = 0x0C

        let increment = 0x2115

        let addr_low = 0x2116
        let addr_high = 0x2117
        let write_low = 0x2118
        let write_high = 0x2119
        let read_low = 0x2139
        let read_high = 0x213A
        let map_bg1 = 0x2107
        let map_bg2 = 0x2108
        let map_bg3 = 0x2109
        let map_bg4 = 0x210A
        let tile_bg12 = 0x210B
        let tile_bg34 = 0x210C
        let hscroll_bg1 = 0x210D
        let vscroll_bg1 = 0x210E
        let hscroll_bg2 = 0x210F
        let vscroll_bg2 = 0x2110
        let hscroll_bg3 = 0x2111
        let vscroll_bg3 = 0x2112
        let hscroll_bg4 = 0x2113
        let vscroll_bg4 = 0x2114

        let INTERRUPT_NMI = 0x80
        let INTERRUPT_HCOUNT = 0x10
        let INTERRUPT_VCOUNT = 0x10
        let INTERRUPT_AUTOJOY = 0x01

        let interrupt = 0x4200

        let STATUS_VBLANK = 0x80
        let STATUS_HBLANK = 0x40
        let STATUS_AUTOJOY = 0x40
        let status = 0x4212

        let color_addr = 0x2121
        let color_write = 0x2122
        let color_read = 0x213B

        let BLEND_CTRL_CLIP_NEVER = 0x80
        let BLEND_CTRL_CLIP_OUTSIDE = 0x40
        let BLEND_CTRL_CLIP_INSIDE = 0x80
        let BLEND_CTRL_CLIP_ALWAYS = 0xC0
        let BLEND_CTRL_DISABLE_NEVER = 0x00
        let BLEND_CTRL_DISABLE_OUTSIDE = 0x10
        let BLEND_CTRL_DISABLE_INSIDE = 0x20
        let BLEND_CTRL_DISABLE_ALWAYS = 0x30
        let BLEND_CTRL_SUBSCREEN = 0x02
        let BLEND_CTRL_256_COLOR = 0x01

        let blend_ctrl = 0x2130

        let BLEND_MODE_ADD = 0x00
        let BLEND_MODE_SUBTRACT = 0x80
        let BLEND_MODE_HALF = 0x40
        let BLEND_MODE_BACKDROP = 0x20
        let BLEND_MODE_OBJ = 0x10
        let BLEND_MODE_BG1 = 0x01
        let BLEND_MODE_BG2 = 0x02
        let BLEND_MODE_BG3 = 0x04
        let BLEND_MODE_BG4 = 0x08
        let blend_mode = 0x2131

        let BLEND_INTENSITY_MASK = 0x1F
        let BLEND_R = 0x20
        let BLEND_G = 0x40
        let BLEND_B = 0x80
        let blend_color = 0x000

        let oam_addr_low = 0x2102
        let oam_addr_high = 0x2103
        let oam_data = 0x2104
    end

    package sgb do
        let CTRL_ON = 0x80
        let CTRL_MODE_4P = 0x20
        let CTRL_MODE_2P = 0x10
        let CTRL_MODE_SPEED_FAST = 0x00
        let CTRL_MODE_SPEED_NORMAL = 0x01
        let CTRL_MODE_SPEED_SLOW = 0x02
        let CTRL_MODE_SPEED_VERY_SLOW = 0x03

        let COMMAND_SIZE = 16

        let gb_scanline = 0x6000
        let vram_select = 0x6001
        let has_command = 0x6002
        let ctrl = 0x6003
        let joy1 = 0x6004
        let joy2 = 0x6005
        let joy3 = 0x6006
        let joy4 = 0x6007 
        let version = 0x600F
        let command = 0x7000 // .. 0x700F
        let vram = 0x7800
    end
end


in ram, 0x1800:
    var t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15 : byte
    var vbl : byte
    var brightness : byte
    var scroll_x, scroll_y : byte
    var row_addr_lo, row_addr_hi : byte
    var col_addr_lo, col_addr_hi : byte
    var tileset_addr_lo, tileset_addr_hi : byte
    var pal_addr : byte
    var oam_addr : byte

in ram, 0x1900:
    var sgb_data : byte * 320

    let SCREEN_ADDRESS = 0x3800
    let BORDER_ADDRESS = 0x3C00

in code, 0x0000:
    // Set emulation mode.
    carry = 1; byte: 0xFB

    [snes.sgb.ctrl] = snes.sgb.CTRL_ON | snes.sgb.CTRL_MODE_2P | snes.sgb.CTRL_MODE_SPEED_NORMAL via a
    [snes.sgb.joy1] = 0xFF via a
    [snes.sgb.joy2] = 0xFF via a
    [brightness] = 15 via a
    [sgb_data] = 0 via a

    // Enable interrupts.
    [snes.ppu.interrupt] = snes.ppu.INTERRUPT_NMI via a

    [brightness] = 15 via a
    x = 15
    loop
        [brightness] = x via a
        [vbl]++
        loop
            a = [vbl]
        until zero end
        x--
    until zero end
    [brightness] = 0 via a

    [snes.ppu.brightness] = snes.ppu.BRIGHTNESS_FORCE_BLANK via a
    [snes.ppu.increment] = snes.ppu.INCREMENT_ON_HIGH via a
    [snes.ppu.addr_low] = <:(BORDER_ADDRESS) via a
    [snes.ppu.addr_high] = >:(BORDER_ADDRESS) via a
    y = 0
    loop
        x = 0
        loop
            [snes.ppu.write_low] = a
            [snes.ppu.write_high] = 0x00 via a
            x++
            compare x to 32
        until == end
        y++
        compare y to 32
    until == end

    [snes.ppu.map_bg1] = >:SCREEN_ADDRESS via a
    [snes.ppu.map_bg2] = >:BORDER_ADDRESS via a
    [snes.ppu.map_bg3] = >:SCREEN_ADDRESS via a
    [snes.ppu.map_bg4] = >:SCREEN_ADDRESS via a
    [snes.ppu.tile_bg12] = 0 via a

    [snes.ppu.bg_mode] = snes.ppu.BG_MODE_0 via a
    [snes.ppu.obj_mode] = 0 via a
    [snes.ppu.main_display] = snes.ppu.DISPLAY_BG1 | snes.ppu.DISPLAY_BG2 via a
    //[snes.ppu.main_window_mask] = 0 via a


    // Main loop.
    loop
        [snes.sgb.vram_select] = [snes.sgb.gb_scanline] & 0x3 + 1 & 0x3 via a

        x = 0
        loop
            [sgb_data:x] = [snes.sgb.vram] via a
            x++
        until zero end loop
            [sgb_data+256:x] = [snes.sgb.vram] via a
            x++
            compare x to 64
        until zero end

        if a = [sgb_data] is not zero then
            [brightness] = 0xF via a
            if a = [sgb_data + 1] & gb.lcd.CTRL_ON is zero then
                [brightness] = snes.ppu.BRIGHTNESS_FORCE_BLANK via a
            end

            [scroll_x] = [sgb_data + 4] via a
            [scroll_y] = [sgb_data + 5] via a

            [row_addr_lo] = [sgb_data + 2] & 0x1F << 5 + <:SCREEN_ADDRESS via a
            [row_addr_hi] = [sgb_data + 2] & 0x1F >> 3 + >:SCREEN_ADDRESS via a
            [col_addr_lo] = [sgb_data + 3] & 0x1F + <:SCREEN_ADDRESS via a
            [col_addr_hi] = >:SCREEN_ADDRESS via a
            [pal_addr] = [sgb_data + 2] via a
            [oam_addr] = [sgb_data + 3] via a
            [tileset_addr_lo] = [sgb_data + 2] & 0x1F << 6 via a
            [tileset_addr_hi] = [sgb_data + 2] & 0x1F >> 2 via a
        end

        [vbl]++
        loop
            a = [vbl]
        until zero end
    end

in code, 0x800:
    task draw do
        push a
        push x via a
        push y via a
        if a = [vbl] is not zero then
            [vbl]--
            [snes.ppu.brightness] = [brightness] via a

            
            if a = [sgb_data] is not zero then
                [snes.ppu.hscroll_bg1] = [scroll_x] via a
                [snes.ppu.hscroll_bg1] = 0x00 via a
                [snes.ppu.vscroll_bg1] = [scroll_y] via a
                [snes.ppu.vscroll_bg1] = 0x00 via a

                if a = [sgb_data]; compare a to 3 is < then
                    call draw_tile_row
                end
                if a = [sgb_data]; compare a to 2 is >= then
                    if compare a to 4 is < then
                        call draw_tile_column
                    end
                end
                if a = [sgb_data]; compare a to 4 is == then
                    call draw_palette_and_sprites
                elseif compare a to 5 is == then
                    call draw_tileset
                end
            end
        end
        y = pop via a
        x = pop via a
        a = pop
    end

    func draw_tile_row do
        x = 0
        [snes.ppu.addr_low] = [row_addr_lo]  via a
        [snes.ppu.addr_high] = [row_addr_hi] via a
        [snes.ppu.increment] = snes.ppu.INCREMENT_ON_HIGH via a
        loop
            [snes.ppu.write_low] = [sgb_data + 16 : x] via a
            [snes.ppu.write_high] = [sgb_data + 48 : x] via a
            x++
            compare x to 32
        until == end
    end

    func draw_tile_column do
        x = 0
        [snes.ppu.addr_low] = [col_addr_lo]  via a
        [snes.ppu.addr_high] = [col_addr_hi] via a
        [snes.ppu.increment] = snes.ppu.INCREMENT_ON_HIGH | snes.ppu.INCREMENT_32 via a
        loop
            [snes.ppu.write_low] = [sgb_data + 80 : x] via a
            [snes.ppu.write_high] = [sgb_data + 112 : x] via a
            x++
            compare x to 32
        until == end
    end

    func draw_palette_and_sprites do
        x = 0
        [snes.ppu.color_addr] = [col_addr_lo]  via a
        loop
            [snes.ppu.color_write] = [sgb_data + 16 : x] via a
            x++
            compare x to 32
        until == end

        x = 0
        [snes.ppu.oam_addr_low] = [oam_addr] via a
        [snes.ppu.oam_addr_high] = 0 via a
        loop
            [snes.ppu.oam_data] = [sgb_data + 48 : x] via a
            x++
            compare x to 160
        until == end
    end

    func draw_tileset do
        x = 0
        [snes.ppu.addr_low] = [tileset_addr_lo]  via a
        [snes.ppu.addr_high] = [tileset_addr_hi] via a
        [snes.ppu.increment] = snes.ppu.INCREMENT_ON_HIGH via a
        loop
            [snes.ppu.write_low] = [sgb_data + 16 : x] via a
            x++
            [snes.ppu.write_high] = [sgb_data + 16 : x] via a
            x++
            compare x to 128
        until == end
    end