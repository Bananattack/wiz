package hijack do
    func init do
        hl = snes_code
        bc = 4096
        de = gb.ram.tile
        call memcpy
        call sgb.prepare_transfer

        hl = ram.t0
        [hl++] = gb.super.DATA_TRN | 1 via a
        [hl++] = 0x00 via a
        [hl++] = 0x00 via a
        [hl++] = 0x7F via a
        a = 0
        bc = 12
        call memset
        hl = ram.t0
        call sgb.send_packet

        /*call video.disable
        hl = (snes_code + 4096)
        bc = 4096
        de = gb.ram.tile
        call memcpy
        call sgb.prepare_transfer

        hl = ram.t0
        [hl++] = gb.super.DATA_TRN | 1 via a
        [hl++] = 0x00 via a
        [hl++] = 0x10 via a
        [hl++] = 0x7F via a
        a = 0
        bc = 12
        call memset
        hl = ram.t0
        call sgb.send_packet*/

        hl = ram.t0
        [hl++] = gb.super.JUMP | 1 via a
        // PC
        [hl++] = 0x00 via a
        [hl++] = 0x00 via a
        [hl++] = 0x7F via a 
        // NMI
        [hl++] = 0x00 via a
        [hl++] = 0x08 via a
        [hl++] = 0x7F via a
        a = 0
        bc = 9
        call memset
        hl = ram.t0
        call sgb.send_packet

/*
        c = 4
        loop
            call video.delay_frame
            c--
        until zero end
        call joy.check
        a = [gb.joy.ctrl] & 0xF
        d = a
        call joy.check
        a = [gb.joy.ctrl] & 0xF
        e = a
        call joy.check
        a = [gb.joy.ctrl] & 0xF
        c = a

        b = 0
        a = e
        if a = e; compare a to 0xE is == then
        elseif a = d; compare a to 0xE is == then
        else
            a = c; compare a to 0xE
            if is ~= then
                call video.disable
                return
            end
        end
*/
        call video.disable

        hl = gb.ram.map
        a = 0
        call prepare_memory

        hl = gb.ram.map2
        a = 60
        call prepare_memory

        hl = gb.ram.tile
        bc = 0x1000
        a = 0x00
        call memset
        [gb.lcd.ctrl] = gb.lcd.CTRL_ON | gb.lcd.CTRL_TILESET2 | gb.lcd.CTRL_BG_ON via a
        b = 1
    end

    func prepare_memory do
        e = 0
        b = 18
        loop
            c = 20
            loop
                [hl++] = a
                a++
                c--
            until zero end

            push de
            de = 12
            hl = hl + de
            de = pop

            e++
            /*if compare e@0 is ~zero then
                if compare e@1 is ~zero then
                    e = 0
                    a = a - 60
                end
            end*/
            a = 0

            b--
        until zero end
    end

    func step do
        call video.buffer_open
        [hl++] = 0x01 via a
        [hl++] = gb.lcd.CTRL_ON via a
        [hl++] = [ram.hijack.row] via a
        [hl++] = [ram.hijack.row] via a
        [hl++] = [ram.hijack.scroll.x] via a
        [hl++] = [ram.hijack.scroll.y] via a
        hl++
        hl++
        de = 8
        hl = hl + de

        a = 0x01
        bc = 32
        call memset
        a = 0x1C
        bc = 32
        call memset
        a = 0x01
        bc = 32
        call memset
        a = 0x1C
        bc = 32
        call memset

        call video.buffer_close

        [ram.hijack.row] = [ram.hijack.row] + 1 & 0x1F via a
        //[ram.hijack.scroll.x] = [ram.hijack.scroll.x] + 1 via a
        //[ram.hijack.scroll.y] = [ram.hijack.scroll.y] + 1 via a
    end

    func load_palette do

    end

    func load_tileset do
        e = c
        d = b
        de = de << 1

        [ram.t0] = d via a

        loop
            push hl // source
            push bc // (source, count)
            call update

            call video.buffer_open
            [hl++] = 0x05 via a
            [hl++] = 0 via a
            bc = pop // (source)
            push bc // (source, count)
            bc = bc << 1
            [hl++] = [ram.t0] - b via a

            a = 0
            bc = 8 + 5
            call memset

            bc = pop // (source)
            de = pop // ()
            push hl // (dest)
            push de // (dest, source)
            hl = pop // (dest)
            de = pop // ()
            push hl // (source)
            push bc // (source, count)
            push de // (source, count, dest)
            bc = 128
            call memcpy

            hl = pop // (source, count)
            call video.buffer_close


            bc = pop // (source)
            c = c - 128 via a
            b = b -# 0 via a
            hl = pop // ()
            l = l + 128 via a
            h = h +# 0 via a
            a = b | c
            until zero
        end
    end
end