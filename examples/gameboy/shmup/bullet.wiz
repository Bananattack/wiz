package bullet do
    func init do
        hl = ram.bullet.data
        a = 0x00
        bc = ram.bullet.SIZE * ram.bullet.MAX
        call memset

        hl = ram.bullet.data2
        a = 0x00
        bc = ram.bullet.SIZE * ram.bullet.MAX
        call memset
    end

    func spawn do
    //  [t0..tSIZE] = new bullet data
        de = ram.bullet.SIZE
        c = ram.bullet.MAX
        loop
            a = [hl]
            if compare a is zero then
                bc = ram.t0
                loop
                    [hl++] = [bc] via a
                    bc++
                    e--
                until zero end
                return
            else
                hl = hl + de
            end
            c--
        until zero end
    end

    func refresh do
        c = ram.bullet.MAX
        def repeat:
            push hl
            a = [hl]
            goto wipe when zero
            a--
            [hl++] = a

            // x = xspeed + x
            // e = x
            a = [hl++]
            e = a + [hl] via a
            compare a; goto wipe when <
            compare a to 160 + 8; goto wipe when >=
            [hl++] = a

            // y = yspeed + y
            // d = y
            a = [hl++]
            d = a + [hl] via a
            compare a to 8; goto wipe when <
            compare a to 144 + 16; goto wipe when >=
            [hl++] = a

            // b = tile
            b = [hl++] via a
            sp++; sp++ // pop
            
        def post:
            // Draw!
            push hl
            call video.oam_open
            [hl++] = d via a
            [hl++] = e via a
            [hl++] = b via a
            [hl++] = 0x00 via a
            call video.oam_close
            hl = pop
            c--
        goto repeat when ~zero
        return

    def wipe:
        hl = pop
        [hl] = 0

        de = ram.bullet.SIZE
        hl = hl + de
        e = 0x00; d = e; b = e
        goto post
    end

    func collide_axis do
        // Arguments:
        // b = self.x
        // c = self.width
        // d = other.x
        // e = other.width
        // Return:
        // a = self.x < other.x + other.width and self.x + self.width > other.x

        c = b + c via a
        e = d + e via a

        a = b; compare a to e; goto failure when >=
        a = d; compare a to c; goto failure when >=
        a = 1
        return
    def failure:
        a = 0
    end

    func collide_one do
        // Arguments:
        // hl = pointer to bullet data
        // b = self.x
        // c = self.width
        // d = self.y
        // e = self.height
        // Return:
        // a = 1 if this bullet collides with object,
        // a = 0 otherwise
        hl++
        hl++
        push bc
        push de
        e = c
        d = b
        b = [hl++] via a
        c = 8
        call collide_axis
        de = pop
        bc = pop
        hl++

        compare a; goto failure_x when zero
        push bc
        push de
        b = [hl++] via a
        c = 8
        call collide_axis
        de = pop
        bc = pop
        hl++

        return

    def failure_x:
        hl++; hl++
    end

    func collide do
        // Arguments:
        // hl = pointer to bullet data
        // b = self.x
        // c = self.width
        // d = self.y
        // e = self.height
        // Return:
        // a = 1 if any bullet collides with object,
        // a = 0 otherwise
        push bc
        push de
        c = ram.bullet.MAX
        loop
            a = [hl]
            if compare a is ~zero then
                [ram.t0] = c via a
                de = pop
                bc = pop
                push bc
                push de
                call collide_one
                compare a; goto done when ~zero
                c = [ram.t0] via a
            else
                de = ram.bullet.SIZE
                hl = hl + de
            end
            c--
        until zero end
        a = 0
    def done:        
        bc = pop
        de = pop
    end
end