include '../common/gameboy.wiz'
include 'layout.wiz'
include 'ram.wiz'
include 'boot.wiz'
include 'joy.wiz'
include 'video.wiz'
include 'player.wiz'

// Fills a range in memory with a specified byte value.
func memset do
    // Arguments:
    let dest = hl // inout
    let value = a // in
    let count = bc // inout
    // Locals:
    let count_l = c
    let count_h = b

    count_l++; count_h++
    goto start
def repeat:
    [dest++] = value
def start:
    count_l--; goto repeat when ~zero
    count_h--; goto repeat when ~zero
end

package hardware do
    inline func detect do
        hl = hardware.type
        [hl] = hardware.GB
        if compare a to 0x11 is == then
            [hl] = hardware.GBC
            if compare b@0 is ~zero then
                [hl] = hardware.GBA
            end
        end
    end
end

func main do
    interrupt = 0
    hl = stack.top
    sp = hl
    
    inline call hardware.detect
    call joy.init
    call video.init
    call player.init

    // Turn off the screen.
    call video.disable

    // Set up a simple black-to-white 4-color palette.
    [gb.mono.palette.bg] = 0b11100100 via a

    do
        let dest = hl
        let value = a
        let count = bc

        // Fill in some very crappy striped tile patterns.
        dest = gb.ram.tile
        value = 0b11111111; count = 16
        inline call memset
        value = 0b10101010; count = 16
        inline call memset
        value = 0b10001000; count = 16
        inline call memset
        value = 0b00000000; count = 16
        inline call memset

        // Clear screen.
        dest = gb.ram.map + 32
        value = 0x03
        count = 1024 - 64
        inline call memset

        // Draw horizontal walls.
        dest = gb.ram.map
        value = 0x00
        count = 20
        inline call memset

        dest = gb.ram.map + (32 * 17)
        count = 20
        inline call memset
    end

    // Draw vertical walls.
    do
        let dest = hl
        let step = bc

        dest = gb.ram.map + 32
        step = 32
        unroll 17 do 
            [dest] = a
            dest = dest + step
        end
        
        dest = gb.ram.map + 32 + 19
        unroll 17 do 
            [dest] = a
            dest = dest + step
        end
    end

    // Turn the screen back on, with backgrounds enabled using tileset 2.
    [gb.lcd.ctrl] = gb.lcd.CTRL_ON | gb.lcd.CTRL_TILESET2 | gb.lcd.CTRL_BG_ON via a

    // Enable some basic interrupts.
    [gb.interrupt.enable] = gb.interrupt.VBLANK | gb.interrupt.STAT via a
    [gb.lcd.stat] = gb.lcd.STAT_SCANLINE_ENABLE via a
    interrupt = 1

    loop
        call joy.check
        call player.update
        call video.flush
    end
end

inline func stack_cleanup do
    hl = pop
    de = pop
    bc = pop
    af = pop    
end

task draw do
    call video.acknowledge
    inline call stack_cleanup
end

task stat do
    loop
        a = [gb.lcd.stat] & gb.lcd.STAT_MODE_MASK
        compare a to gb.lcd.STAT_MODE_HBLANK
    until == end
    inline call stack_cleanup
end

task stub do
    inline call stack_cleanup
end

let timer = stub
let serial = stub
let joypad = stub
