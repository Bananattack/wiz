let K = 1024
bank header : rom * 16
bank ram : ram * 2 * K
bank prg : rom * 16 * K
bank chr : rom * 8 * K

in header, 0x00:
    do
        let mirroring = 0
        let battery = 0
        let fourscreen = 0
        let mapper = 0

        // 0..3: "NES" followed by MS-DOS end-of-file marker.
        byte * 4: "NES", 0x1A
        // 4: Number of 16K PRG ROM banks
        byte: 1
        // 5: Number of 8K CHR ROM banks
        byte: 1
        // 6: The "Flags 6" byte, skip the 'trainer' flag for now.
        byte: (mirroring) | (battery << 1) | (fourscreen << 3) | ((mapper & 0xF) << 4)
        // 7: The "Flags 7" byte, just the mapper part though.
        byte: (mapper >> 4)
        // 8: Number of 8K PRG RAM banks -- for now just write a 0, which implies 8KB PRG RAM at most.
        byte: 0
        // 9..15: Ignore other flag fields. Zero-pad this header to 16 bytes.
        byte: 0, 0, 0, 0, 0, 0, 0
    end

in ram, 0x00:
    var t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15: byte

in prg, 0xC000:
    include '../common/hardware.wiz'

    func load_palette do
        [ppu.address] = >ppu.PALETTE_BASE via a
        [ppu.address] = <ppu.PALETTE_BASE via a
        x = 0
        loop
            [ppu.data] = [palette:x] via a
            x++
            compare x to (ppu.PALETTE_SIZE * ppu.PALETTE_TOTAL)
        until zero end
    end
    
    func print_text do
        let START_X = 10
        let START_Y = 13
        let TILE_ADDRESS = ppu.NAMETABLE_BASE + (START_Y * 32 + START_X)
        
        // Read PPU status to reset its state.
        [ppu.status] = a
        // Now setup the PPU for copying tiles.
        [ppu.address] = >TILE_ADDRESS via a
        [ppu.address] = <TILE_ADDRESS via a
        
        x = 0
        loop
            a = [message:x]
        while ~zero
            x++
            [ppu.data] = a
        end
    end

    func main do
        // Set necessary processor flags.
        decimal = 0
        interrupt = 1
        // Prepare stack.
        s = 0xFF via x
        
        // Turn off rendering.
        [ppu.ctrl] = 0 via x
        [ppu.mask] = x
        
        // Wait for the PPU to be ready to use, which takes 2 vertical blanks.
        loop
            loop
                compare a & [ppu.status] // TODO
            until negative end
            x++
            compare x to 2 
        until == end
        
        call load_palette
        call print_text
        
        // We're finally ready to show the screen!
        [ppu.ctrl] = ppu.CTRL_NMI via a
        [ppu.mask] = (ppu.MASK_LEFTMOST_BG | ppu.MASK_RENDER_BG) via a

        loop end
    end
    
    task draw do
        push a
        a = x; push a
        a = y; push a
        a = [ppu.status]
        [ppu.scroll] = 0 via a
        [ppu.scroll] = a
        y = pop via a
        x = pop via a
        a = pop
    end
    
    task scan do
        push a
        a = x; push a
        a = y; push a
        y = pop via a
        x = pop via a
        a = pop       
    end

in prg, 0xE000:
    def message:
        // A null-terminated message.
        byte: "HELLO  WORLD", 0
    
    def palette:
        // Tiles
        byte:
            0x0F, 0x00, 0x10, 0x30,
            0x0F, 0x00, 0x10, 0x30,
            0x0F, 0x00, 0x10, 0x30,
            0x0F, 0x00, 0x10, 0x30
        // Sprites
        byte:
            0x0F, 0x00, 0x10, 0x30,
            0x0F, 0x00, 0x10, 0x30,
            0x0F, 0x00, 0x10, 0x30,
            0x0F, 0x00, 0x10, 0x30

in prg, 0xFFFA:
    word: draw, main, scan

in chr, 0x0000:
    embed '../common/hello_tiles.chr'