let K = 1024
bank header : rom * 16
bank ram : ram * 2 * K
bank prg : rom * 16 * K
bank chr : rom * 8 * K

in header, 0x00:
    do
        let mirroring = 1
        let battery = 0
        let fourscreen = 0
        let mapper = 0

        // 0..3: "NES" followed by MS-DOS end-of-file marker.
        byte * 4: "NES", 0x1A
        // 4: Number of 16K PRG ROM banks
        byte: 1
        // 5: Number of 8K CHR ROM banks
        byte: 1
        // 6: The "Flags 6" byte, skip the 'trainer' flag for now.
        byte: (mirroring) | (battery << 1) | (fourscreen << 3) | ((mapper & 0xF) << 4)
        // 7: The "Flags 7" byte, just the mapper part though.
        byte: (mapper >> 4)
        // 8: Number of 8K PRG RAM banks -- for now just write a 0, which implies 8KB PRG RAM at most.
        byte: 0
        // 9..15: Ignore other flag fields. Zero-pad this header to 16 bytes.
        byte * 7: 0, 0, 0, 0, 0, 0, 0
    end

in ram, 0x00:
    var t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15: byte
    
    package camera do
        var x_lo : byte
        var x_hi : byte
        var direction : byte
        var tile_buffer_lo : byte
        var tile_buffer_hi : byte
        var attribute_buffer_lo : byte
        var attribute_buffer_hi : byte
    end
    
    package world do
        let WIDTH = 3

        var ptr_lo : byte
        var ptr_hi : byte
    end
    
    package redraw do
        let SPRITES = 0x1
        let SCROLL_TILES = 0x2

        var request : byte
    end
    
    package direction do
        let RIGHT = 0x00
        let LEFT = 0x01
    end
    
    var unpress : byte
    var controls : byte

in ram, 0x200:
    var sprite_buffer : byte * 256

in ram, 0x300:
    package scroll do
        // 8x8 tiles stored in this order:
        //     AB
        //     CD
        var tile_buffer_left : byte * 60
        var tile_buffer_right : byte * 60
        // 32x32 attribute tiles.
        var attribute_buffer_left : byte * 8
        var attribute_buffer_right : byte * 8
    end
    
in prg, 0xC000:
    include '../common/hardware.wiz'
    include '../common/tilemap.wiz'

    func load_palette do
        [ppu.address] = >ppu.PALETTE_BASE via a
        [ppu.address] = <ppu.PALETTE_BASE via a
        x = 0
        loop
            [ppu.data] = [palette:x] via a
            x++
            compare x to (ppu.PALETTE_SIZE * ppu.PALETTE_TOTAL)
        until zero end
    end
    
    // Reads controller and stores the result in controls
    // Derived from code posted by blargg on nesdevwiki
    func check_controls do
        // Strobe controller
        [joy.out] = 1 via a
        [joy.out] = 0 via a
        // Read all 8 buttons
        x = 8
        loop
            // Read next button state and mask off low 2 bits.
            // Compare with $01, which will set carry flag if
            // either or both bits are set.
            a = [joy.in1] & 0x3
            compare a to 1
            // Now, rotate the carry flag into the top of A,
            // land shift all the other buttons to the right
            [controls] = [controls] >>> 1 via a
            x--
        until zero end
        // Remove unpress flag for controls no longer being held.
        [unpress] = [unpress] & [controls] via a
        // Remove controls that have the unpress flag set.
        // (Keep controls that don't have the unpress flag set)
        [controls] = ~[unpress] & [controls] via a
    end
    
    func print_text do
        let START_X = 10
        let START_Y = 13
        let TILE_ADDRESS = ppu.NAMETABLE_BASE + (START_Y * 32 + START_X)
        
        // Read PPU status to reset its state.
        [ppu.status] = a
        // Now setup the PPU for copying tiles.
        [ppu.address] = >TILE_ADDRESS via a
        [ppu.address] = <TILE_ADDRESS via a
        
        x = 0
        loop
            a = [message:x]
        while ~zero
            x++
            [ppu.data] = a
        end
    end
    
    func buffer_column do
        a = [camera.x_hi]
        if compare a to world.WIDTH - 1 is < then
            [t0] = <tile_top_left via a
            [t1] = >tile_top_left via a
            [t2] = [world.ptr_lo] via a
            [t3] = [camera.x_hi] + 1 + [world.ptr_hi] via a
            [t4] = [camera.x_lo] >> 4 via a
            [t5] = <scroll.tile_buffer_right via a
            [t6] = >scroll.tile_buffer_right via a
            call tilemap.update_tile_buffer
            
            [t0] = <tile_attribute via a
            [t1] = >tile_attribute via a
            [t2] = [world.ptr_lo] via a
            [t3] = [camera.x_hi] + 1 + [world.ptr_hi] via a
            [t4] = [camera.x_lo] >> 4 & 0x0E via a
            [t5] = <scroll.attribute_buffer_right via a
            [t6] = >scroll.attribute_buffer_right via a
            call tilemap.update_attribute_buffer
        end

        a = [camera.x_hi]
        if compare a to 0 is >= then
            [t0] = <tile_top_left via a
            [t1] = >tile_top_left via a
            [t2] = [world.ptr_lo] via a
            [t3] = [camera.x_hi] + [world.ptr_hi] via a
            [t4] = [camera.x_lo] >> 4 via a
            [t5] = <scroll.tile_buffer_left via a
            [t6] = >scroll.tile_buffer_left via a
            call tilemap.update_tile_buffer

            [t0] = <tile_attribute via a
            [t1] = >tile_attribute via a
            [t2] = [world.ptr_lo] via a
            [t3] = [camera.x_hi] + [world.ptr_hi] via a
            [t4] = [camera.x_lo] >> 4 & 0x0E via a
            [t5] = <scroll.attribute_buffer_left via a
            [t6] = >scroll.attribute_buffer_left via a
            call tilemap.update_attribute_buffer
        end
    end

    func main do
        // Set necessary processor flags.
        decimal = 0
        interrupt = 1
        // Prepare stack.
        s = 0xFF via x
        
        // Turn off rendering.
        [ppu.ctrl] = 0 via x
        [ppu.mask] = x
        
        // Wait for the PPU to be ready to use, which takes 2 vertical blanks.
        loop
            loop
                compare a & [ppu.status]
            until negative end
            x++
            compare x to 2 
        until == end
        
        x = 0
        loop
            [0x000:x] = 0 via a
            [0x400:x] = a
            [0x200:x] = 0xFE via a
            [0x300:x] = 2 via a
            x++
        until zero end
        
        call load_palette

        // Setup the world map pointer.
        [world.ptr_lo] = <world_map via a
        [world.ptr_hi] = >world_map via a
        
        // Init the tileset pointer.
        [t0] = <tile_top_left via a
        [t1] = >tile_top_left via a
        // Setup the map pointer for the first screen
        [t2] = [world.ptr_lo] via a
        [t3] = [world.ptr_hi] via a
        // Nametable 0.
        [t4] = 0 via a
        call tilemap.load
        
        // We're finally ready to show the screen!
        [ppu.ctrl] = ppu.CTRL_NMI via a
        [ppu.mask] = ppu.MASK_LEFTMOST_BG | ppu.MASK_RENDER_BG via a

        [apu.flag] = apu.FLAG_SQUARE1 via a

        [camera.direction] = direction.RIGHT via a
        loop
            call check_controls
            a = [controls] & joy.A
            if is ~zero then
                [camera.direction] = [camera.direction] ^ 1 via a
                [unpress] = [unpress] | joy.A via a
            end
        
            a = [camera.direction]
            if is zero then
                a = [camera.x_hi]
                if compare a to world.WIDTH - 1 is < then
                    [camera.x_lo]++
                    if is zero then
                        [camera.x_hi]++
                    end
                end
            else
                a = [camera.x_lo]
                if is zero then
                    a = [camera.x_hi]
                    if is zero then
                        [camera.x_lo]++ // Cancel out decrement.
                    else
                        [camera.x_hi]--
                    end
                end
                [camera.x_lo]--
            end
            
            a = [camera.direction]
            if is zero then
                [camera.tile_buffer_lo] = <scroll.tile_buffer_right via a
                [camera.tile_buffer_hi] = >scroll.tile_buffer_right via a
                [camera.attribute_buffer_lo] = <scroll.attribute_buffer_right via a
                [camera.attribute_buffer_hi] = >scroll.attribute_buffer_right via a
            else
                [camera.tile_buffer_lo] = <scroll.tile_buffer_left via a
                [camera.tile_buffer_hi] = >scroll.tile_buffer_left via a
                [camera.attribute_buffer_lo] = <scroll.attribute_buffer_left via a
                [camera.attribute_buffer_hi] = >scroll.attribute_buffer_left via a
            end
            call buffer_column
            
            a = [camera.direction]
            if is zero then
                a = [camera.x_hi]
                compare a to world.WIDTH - 1
                if is < then
                    [redraw.request] = [redraw.request] | redraw.SCROLL_TILES via a
                end
            else
                a = [camera.x_hi]
                compare a to 0
                if is >= then
                    [redraw.request] = [redraw.request] | redraw.SCROLL_TILES via a
                end            
            end
            
            [redraw.request] = [redraw.request] | redraw.SPRITES via a
            loop
                a = [redraw.request]
            until zero end
        end
    end
    
    task draw do
        push a
        a = x; push a
        a = y; push a
        a = [ppu.status]
        
        a = [redraw.request] & redraw.SPRITES
        if is ~zero then
            [ppu.oam.address] = >sprite_buffer via a
            [ppu.oam.dma] = <sprite_buffer via a

            // Done redrawing tiles
            [redraw.request] = [redraw.request] ^ redraw.SPRITES via a
        end
        
        a = [redraw.request] & redraw.SCROLL_TILES
        if is ~zero then
            a = [t0]; push a; [t0] = [camera.x_lo] via a
            a = [t1]; push a; [t1] = [camera.x_hi] via a
            a = [t2]; push a; [t2] = [camera.tile_buffer_lo] via a
            a = [t3]; push a; [t3] = [camera.tile_buffer_hi] via a
            a = [t4]; push a; [t4] = [camera.direction] via a
            call tilemap.draw_tile_buffer
            
            [t0] = [camera.x_lo] via a
            [t1] = [camera.x_hi] via a
            [t2] = [camera.attribute_buffer_lo] via a
            [t3] = [camera.attribute_buffer_hi] via a
            [t4] = [camera.direction] via a
            call tilemap.draw_attribute_buffer
            
            [t4] = pop via a
            [t3] = pop via a
            [t2] = pop via a
            [t1] = pop via a
            [t0] = pop via a
            
            // Done redrawing tiles
            [redraw.request] = [redraw.request] ^ redraw.SCROLL_TILES via a
        end
         
        [ppu.ctrl] = [camera.x_hi] & 1 | ppu.CTRL_NMI via a
        [ppu.scroll] = [camera.x_lo] via a
        [ppu.scroll] = 0 via a
        y = pop via a
        x = pop via a
        a = pop
    end
    
    task scan do
        push a
        a = x; push a
        a = y; push a
        y = pop via a
        x = pop via a
        a = pop
    end

in prg, 0xE000:
    def message:
        // A null-terminated message.
        byte: "HELLO  WORLD", 0
    def palette:
        // Tiles
        byte: 0x0F, 0x0C, 0x00, 0x10
        byte: 0x0F, 0x11, 0x11, 0x30
        byte: 0x0F, 0x05, 0x15, 0x25
        byte: 0x0F, 0x09, 0x19, 0x29
        // Sprites
        byte: 0x0F, 0x00, 0x10, 0x30
        byte: 0x0F, 0x00, 0x10, 0x30
        byte: 0x0F, 0x00, 0x10, 0x30
        byte: 0x0F, 0x00, 0x10, 0x30

in prg, 0xE100:
    def tile_top_left:
        byte:
            0x01, 0x04, 0x24, 0x01, 0x06, 0x11, 0x03, 0x03, 0x08, 0x09, 0x0B, 0x28, 0x09, 0x10, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
in prg, 0xE200:
    def tile_top_right:
        byte:
            0x01, 0x05, 0x25, 0x01, 0x07, 0x03, 0x03, 0x12, 0x08, 0x0A, 0x0C, 0x28, 0x09, 0x03, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00;
in prg, 0xE300:
    def tile_bottom_left:
        byte:
            0x01, 0x14, 0x01, 0x01, 0x16, 0x21, 0x03, 0x03, 0x18, 0x09, 0x0B, 0x28, 0x09, 0x20, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00;
in prg, 0xE400:
    def tile_bottom_right:
        byte:
            0x01, 0x15, 0x01, 0x01, 0x17, 0x03, 0x03, 0x22, 0x18, 0x0A, 0x0C, 0x28, 0x09, 0x03, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00;
in prg, 0xE500:
    def tile_attribute:
        byte:
            0x01, 0x03, 0x03, 0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00;
in prg, 0xE600:
    def world_map:
        byte:
            0x00, 0x00, 0x00, 0x05, 0x06, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
            0x00, 0x00, 0x05, 0x06, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x06, 0x06, 0x07, 0x00, 0x00, 0x00,
            0x00, 0x05, 0x06, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x05, 0x06, 0x04, 0x07, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
            0x00, 0x00, 0x04, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x04, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x09, 0x0A, 0x04, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x04, 0x09, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04,
            0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
            0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03;
in prg, 0xE700:
    def world_map2:
        byte:
            0x06, 0x06, 0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
            0x06, 0x07, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x06, 0x07, 0x00, 0x0B,
            0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x06, 0x07, 0x00, 0x00, 0x0B,
            0x04, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04,
            0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
            0x0D, 0x06, 0x06, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00,
            0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x06,
            0x08, 0x05, 0x06, 0x06, 0x06, 0x07, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,
            0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0C,
            0x0B, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x09, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
            0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
            0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03;
in prg, 0xE800:
    def world_map3:
        byte:
            0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07,
            0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x05, 0x06, 0x06, 0x06, 0x06,
            0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x06, 0x06,
            0x04, 0x04, 0x04, 0x04, 0x04, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06,
            0x00, 0x00, 0x00, 0x05, 0x08, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x07, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0B, 0x09, 0x0A, 0x04, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0C, 0x0C, 0x09, 0x0A, 0x04, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x04, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x04, 0x00, 0x00, 0x08, 0x00, 0x00,
            0x04, 0x04, 0x04, 0x00, 0x0B, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x04, 0x00, 0x00, 0x0B, 0x00, 0x00,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
            0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03;
in prg, 0xFFFA:
    word: draw, main, scan
    
in chr, 0x0000:
    embed '../common/scroller_tiles.chr'