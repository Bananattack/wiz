let K = 1024
bank header : rom * 16
bank ram : ram * 2 * K
bank #0 aux : rom * 8 * K
bank #0 aux2 : rom * 8 * K
bank #1 main : rom * 8 * K
bank #1 main2 : rom * 8 * K
bank chr : rom * 8 * K

in header, 0x00:
    do
        let mirroring = 0
        let battery = 0
        let fourscreen = 0
        let mapper = 4

        // 0..3: "NES" followed by MS-DOS end-of-file marker.
        byte * 4: "NES", 0x1A
        // 4: Number of 16K PRG ROM banks
        byte: 2
        // 5: Number of 8K CHR ROM banks
        byte: 1
        // 6: The "Flags 6" byte, skip the 'trainer' flag for now.
        byte: (mirroring) | (battery << 1) | (fourscreen << 3) | ((mapper & 0xF) << 4)
        // 7: The "Flags 7" byte, just the mapper part though.
        byte: (mapper >> 4)
        // 8: Number of 8K PRG RAM banks -- for now just write a 0, which implies 8KB PRG RAM at most.
        byte: 0
        // 9..15: Ignore other flag fields. Zero-pad this header to 16 bytes.
        byte * 7: 0, 0, 0, 0, 0, 0, 0
    end

in ram, 0x00:
    var t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15 : byte

    var scanline : byte
    package camera do
        var x : byte
        var x2 : byte
        var x3 : byte
    end

    var counter : byte
    var frame : byte
in ram, 0x100:
    var stack : byte * 256
in ram, 0x200:
    var oam : byte * 256
    
in main, 0xC000:
    include 'hardware.wiz'

    func main do
        // Set necessary processor flags.
        decimal = 0
        interrupt = 1
        // Prepare stack.
        s = 0xFF via x
        
        // Turn off rendering.
        [nes.ppu.ctrl] = 0 via x
        [nes.ppu.mask] = x
        [nes.mmc3.irq.disable] = x
        [nes.apu.sequencer] = nes.apu.SEQUENCER_DISABLE_IRQ via a
        
        // Wait for the PPU to be ready to use, which takes 2 vertical blanks.
        loop
            loop
                compare a & [nes.ppu.status]
            until negative end
            x++
            compare x to 2 
        until == end
        
        x = 0
        loop
            [0x000:x] = 0 via a
            x++
        until zero end

        [nes.ppu.address] = >nes.ppu.PALETTE_BASE via a
        [nes.ppu.address] = <nes.ppu.PALETTE_BASE via a
        x = 0
        loop
            [nes.ppu.data] = [palette:x] via a
            x++
            compare x to 32
            until ==
        end

        [nes.ppu.address] = >nes.ppu.NAMETABLE_BASE via a
        [nes.ppu.address] = <nes.ppu.NAMETABLE_BASE via a
        x = 0
        loop
            [nes.ppu.data] = [map:x] via a
            x++
            until zero
        end
        loop
            [nes.ppu.data] = [256+map:x] via a
            x++
            until zero
        end
        loop
            [nes.ppu.data] = [256*2+map:x] via a
            x++
            until zero
        end
        loop
            [nes.ppu.data] = [256*3+map:x] via a
            x++
            until zero
        end
        loop
            [oam:x] = [sprites:x] via a
            x++
            until zero
        end

        [nes.ppu.scroll] = 0x00 via a
        [nes.ppu.scroll] = 0x00 via a
        [nes.ppu.ctrl] = nes.ppu.CTRL_NMI | nes.ppu.CTRL_SPRITE_PATTERN_1 via a
        [nes.ppu.mask] = nes.ppu.MASK_RENDER_BG | nes.ppu.MASK_RENDER_SPRITES | nes.ppu.MASK_LEFTMOST_BG | nes.ppu.MASK_LEFTMOST_SPRITES via a
        interrupt = 0

        loop
        end
    end
    
    task draw do
        push a
        push x via a
        push y via a
        
        [nes.mmc3.irq.latch] = 72 via a
        [nes.mmc3.irq.reload] = a
        [nes.mmc3.irq.enable] = a

        [nes.ppu.oam.address] = <oam via a
        [nes.ppu.oam.dma] = >oam via a

        a = [nes.ppu.status]
        [nes.ppu.ctrl] = nes.ppu.CTRL_NMI | nes.ppu.CTRL_SPRITE_PATTERN_1 via a
        [nes.ppu.scroll] = [camera.x3] via a
        [nes.ppu.scroll] = 0x00 via a
        [camera.x] = [camera.x] + 1 via a
        if a = a & 1 is zero then
            [camera.x2] = [camera.x2] + 1 via a
            if a = a & 7 is zero then
                [camera.x3] = [camera.x3] + 1 via a
            end
        end

        [counter] = [counter] + 1 via a
        if compare a to 12 is == then
            [counter] = 0 via a
            [frame] = [frame] ^ 1 via a
            if is zero then
                [oam + (8 * 4) + 1] = 0x42 via a
                [oam + (9 * 4) + 1] = 0x43 via a
            else
                [oam + (8 * 4) + 1] = 0x30 via a
                [oam + (9 * 4) + 1] = 0x31 via a
            end
        end

        [scanline] = 0 via a

        y = pop via a
        x = pop via a
        a = pop
    end
    
    task scan do
        push a
        push x via a
        push y via a
        
        [nes.mmc3.irq.disable] = a

        a = [scanline]
        if compare a to 0 is == then
            [nes.mmc3.irq.latch] = 22 via a
            [nes.mmc3.irq.reload] = a
            [nes.mmc3.irq.enable] = a

            a = [nes.ppu.status]
            [nes.ppu.scroll] = [camera.x2] via a
            [nes.ppu.scroll] = 0x00 via a
            a = [nes.ppu.status]
        elseif compare a to 1 is == then
            [nes.mmc3.irq.latch] = 79 via a
            [nes.mmc3.irq.reload] = a
            [nes.mmc3.irq.enable] = a

            a = [nes.ppu.status]
            [nes.ppu.scroll] = [camera.x] via a
            [nes.ppu.scroll] = 0x00 via a
            a = [nes.ppu.status]
        else
            a = [nes.ppu.status]
            [nes.ppu.scroll] = 0x00 via a
            [nes.ppu.scroll] = a
            a = [nes.ppu.status]
        end
        [scanline]++
        
        y = pop via a
        x = pop via a
        a = pop
    end

def palette:
    byte: 0x08, 0x22, 0x21, 0x30
    byte: 0x08, 0x22, 0x19, 0x29
    byte: 0x08, 0x00, 0x10, 0x30
    byte: 0x08, 0x00, 0x10, 0x30
    byte: 0x08, 0x08, 0x22, 0x26
    byte: 0x08, 0x08, 0x26, 0x37
    byte: 0x08, 0x08, 0x08, 0x08
    byte: 0x08, 0x08, 0x08, 0x08

def map:
    // Tile table
    byte: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    byte: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    byte: 0x18, 0x19, 0x1A, 0x18, 0x19, 0x1A, 0x18, 0x19, 0x1A, 0x18, 0x19, 0x1A, 0x18, 0x19, 0x1A, 0x18, 0x19, 0x1A, 0x18, 0x19, 0x1A, 0x18, 0x19, 0x1A, 0x18, 0x19, 0x1A, 0x18, 0x19, 0x1A, 0x18, 0x19 
    byte: 0x01, 0x29, 0x01, 0x2B, 0x01, 0x01, 0x2A, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x0A, 0x0B, 0x0C, 0x2C, 0x01, 0x2B, 0x01, 0x01, 0x01, 0x29, 0x01, 0x2B, 0x01, 0x01, 0x01, 0x29, 0x01, 0x2B, 0x01
    byte: 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x0A, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x02, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E
    byte: 0x02, 0x1B, 0x1C, 0x1D, 0x1E, 0x02, 0x02, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x02, 0x02
    byte: 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x02
    byte: 0x2E, 0x02, 0x02, 0x02, 0x02, 0x2D, 0x2E, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x02, 0x2D, 0x2E, 0x02, 0x02, 0x02, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x02
    byte: 0x3E, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x39, 0x3A, 0x3B, 0x3C, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x3E, 0x39
    byte: 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09
    byte: 0x01, 0x04, 0x05, 0x06, 0x07, 0x08, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x04, 0x05, 0x06, 0x07, 0x08, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
    byte: 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x04, 0x05, 0x06, 0x07, 0x08, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x04, 0x05, 0x06, 0x07, 0x08, 0x01, 0x01
    byte: 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x50, 0x51
    byte: 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x60, 0x61
    byte: 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x70, 0x71
    byte: 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
    byte: 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
    byte: 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03    
    byte: 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
    byte: 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
    byte: 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
    byte: 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03    
    byte: 0xDE, 0xFB, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFB, 0xDF
    byte: 0xDE, 0xFD, 0x01, 0xC7, 0xEF, 0xF2, 0xE4, 0x01, 0x90, 0x91, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x9C, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xDF
    byte: 0xDF, 0xFD, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xDE    
    byte: 0xDE, 0xFD, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xDF
    byte: 0xDF, 0xFD, 0x01, 0xD0, 0xE8, 0xE1, 0xEE, 0xF4, 0xE1, 0xF3, 0xED, 0xE1, 0xEC, 0x01, 0xC6, 0xE9, 0xE5, 0xEC, 0xE4, 0xF3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xDE
    byte: 0xDF, 0xFB, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFB, 0xDE
    byte: 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD
    byte: 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC, 0xDD, 0xDC
    // Attribute table
    byte: 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
    byte: 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
    byte: 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
    byte: 0b01010101, 0b01010101, 0b01010101, 0b01010101, 0b01010101, 0b01010101, 0b01010101, 0b01010101
    byte: 0b01010101, 0b01010101, 0b01010101, 0b01010101, 0b01010101, 0b01010101, 0b01010101, 0b01010101
    byte: 0b00000101, 0b00000101, 0b00000101, 0b00000101, 0b00000101, 0b00000101, 0b00000101, 0b00000101
    byte: 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
    byte: 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000

def sprites:
    byte: 0x87, 0x02, 0x01, 0x35
    byte: 0x92, 0x12, 0x01, 0x32
    byte: 0x80, 0x00, 0x00, 0x30
    byte: 0x80, 0x01, 0x00, 0x38
    byte: 0x88, 0x10, 0x00, 0x30
    byte: 0x88, 0x11, 0x00, 0x38
    byte: 0x90, 0x20, 0x00, 0x30
    byte: 0x90, 0x21, 0x00, 0x38
    byte: 0x98, 0x30, 0x00, 0x30
    byte: 0x98, 0x31, 0x00, 0x38
    byte: 0xB5, 0x32, 0x00, 0x43
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE
    byte: 0xFE, 0xFE, 0xFE, 0xFE

in main2, 0xE000:
in main2, 0xFFFA:
    word: draw, main, scan
    
in chr, 0x0000:
    embed 'battle.chr'
    embed 'sprites.chr'


